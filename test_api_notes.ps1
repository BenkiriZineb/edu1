# Script de test pour l'API des notes
Write-Host "üß™ TEST DE L'API DES NOTES" -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Cyan

# Attendre que le serveur d√©marre
Write-Host "‚è≥ Attente du d√©marrage du serveur..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# Test 1: V√©rifier que le serveur est accessible
Write-Host "`nüîç Test 1: V√©rification de l'accessibilit√© du serveur" -ForegroundColor Green
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/notes" -Method GET
    Write-Host "‚úÖ Serveur accessible !" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Serveur non accessible: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Test 2: Cr√©er une nouvelle note
Write-Host "`nüìù Test 2: Cr√©ation d'une nouvelle note" -ForegroundColor Green
$nouvelleNote = @{
    eleveId = 1
    coursId = 1
    matiereId = 1
    valeur = 15.5
    noteMaximale = 20.0
    commentaire = "Tr√®s bon travail !"
    date = "2025-08-26"
    type = "DEVOIR"
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/notes" -Method POST -Body $nouvelleNote -ContentType "application/json"
    Write-Host "‚úÖ Note cr√©√©e avec succ√®s ! ID: $($response.id)" -ForegroundColor Green
    $noteId = $response.id
} catch {
    Write-Host "‚ùå Erreur lors de la cr√©ation: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Test 3: R√©cup√©rer la note par ID
Write-Host "`nüîç Test 3: R√©cup√©ration de la note par ID" -ForegroundColor Green
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/notes/$noteId" -Method GET
    Write-Host "‚úÖ Note r√©cup√©r√©e ! Valeur: $($response.valeur)/$($response.noteMaximale)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la r√©cup√©ration: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 4: R√©cup√©rer toutes les notes
Write-Host "`nüìã Test 4: R√©cup√©ration de toutes les notes" -ForegroundColor Green
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/notes" -Method GET
    Write-Host "‚úÖ $($response.Count) note(s) r√©cup√©r√©e(s)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la r√©cup√©ration: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 5: R√©cup√©rer les notes d'un √©l√®ve
Write-Host "`nüë®‚Äçüéì Test 5: R√©cup√©ration des notes d'un √©l√®ve" -ForegroundColor Green
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/notes/eleve/1" -Method GET
    Write-Host "‚úÖ $($response.Count) note(s) trouv√©e(s) pour l'√©l√®ve 1" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la r√©cup√©ration: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 6: Calculer la moyenne d'un √©l√®ve
Write-Host "`nüìä Test 6: Calcul de la moyenne d'un √©l√®ve" -ForegroundColor Green
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/notes/eleve/1/moyenne" -Method GET
    Write-Host "‚úÖ Moyenne de l'√©l√®ve 1: $response%" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors du calcul: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 7: Statistiques d'un √©l√®ve
Write-Host "`nüìà Test 7: Statistiques d'un √©l√®ve" -ForegroundColor Green
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/notes/eleve/1/stats" -Method GET
    Write-Host "‚úÖ Statistiques √©l√®ve 1:" -ForegroundColor Green
    Write-Host "   - Moyenne: $($response.moyenne)%" -ForegroundColor White
    Write-Host "   - Note max: $($response.noteMaximale)%" -ForegroundColor White
    Write-Host "   - Note min: $($response.noteMinimale)%" -ForegroundColor White
    Write-Host "   - Total notes: $($response.totalNotes)" -ForegroundColor White
} catch {
    Write-Host "‚ùå Erreur lors des statistiques: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 8: Validation d'une note
Write-Host "`n‚úÖ Test 8: Validation d'une note" -ForegroundColor Green
$validationData = @{
    valeur = 18.0
    noteMaximale = 20.0
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/notes/validation" -Method POST -Body $validationData -ContentType "application/json"
    Write-Host "‚úÖ Note valid√©e: $response" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la validation: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 9: Mise √† jour d'une note
Write-Host "`n‚úèÔ∏è Test 9: Mise √† jour d'une note" -ForegroundColor Green
$updateData = @{
    valeur = 17.0
    commentaire = "Note mise √† jour !"
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/notes/$noteId" -Method PUT -Body $updateData -ContentType "application/json"
    Write-Host "‚úÖ Note mise √† jour ! Nouvelle valeur: $($response.valeur)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la mise √† jour: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 10: Suppression d'une note
Write-Host "`nüóëÔ∏è Test 10: Suppression d'une note" -ForegroundColor Green
try {
    Invoke-RestMethod -Uri "http://localhost:8080/api/notes/$noteId" -Method DELETE
    Write-Host "‚úÖ Note supprim√©e avec succ√®s !" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la suppression: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüéâ TOUS LES TESTS TERMIN√âS !" -ForegroundColor Cyan
Write-Host "Votre API des notes fonctionne parfaitement !" -ForegroundColor Green
